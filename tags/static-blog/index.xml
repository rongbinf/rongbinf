<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>static-blog on Rongbin&#39;s Blog</title>
    <link>https://fanrongbin.com/tags/static-blog/</link>
    <description>Recent content in static-blog on Rongbin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 05 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://fanrongbin.com/tags/static-blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>更换了博客主题 Blog Theme Changed</title>
      <link>https://fanrongbin.com/blog-theme-changed/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/blog-theme-changed/</guid>
      <description>在23年年末陆陆续续对首页和博客主题进行了调整。首先是将用了很久的Dolt主题换成了hugo-tufte，而后为了首页相统一，就又自己写了目前的这个主题，还没起名字，应该也不会发出去哈哈。&#xA;额外自定义了Hypothes.is和目录的显示按钮，以及一些小小的js，用来实现切开过长的inline code、顶部阅读进度条，以及Guestbook页面的在线状态更新、首页的新文章拉取等等（借助Cloudflare Workers）。对旁注也做了样式， 就像这样。（桌面端会有一条连线。） 页面大于等于三处旁注时，会调用jsPlumb，例如这篇博文（请通过桌面端访问）。&#xA;首页从依赖于Dolt的index.html，换到第一版，使用Skelet.min.css框架。然后是第二版，加上了头像和动画。最后是目前的这一版，依靠display: grid布局。&#xA;I started adjusting my homepage and the blog theme bit by bit started from the end of 2023. First off, I swapped out the Dolt theme, which I&amp;rsquo;d been using for quite a long time, for hugo-tufte to provide better reading experience. To make everything look more uniform with my &amp;ldquo;hand-written&amp;rdquo; homepage, I ended up creating my own theme. It’s still nameless (exampleTheme, lol), and I’m not really planning to share it publicly.</description>
    </item>
    <item>
      <title>使用 Github Actions 自动部署 Hugo</title>
      <link>https://fanrongbin.com/github-actions-deploy-hugo/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/github-actions-deploy-hugo/</guid>
      <description>回应痛点：&#xA;写作所用的设备不带环境，没有Git，必须换回原来用的设备hugo生成网页并部署 只想好好写东西，不想再管我的终端/命令行 本文假设你已经在本地拥有一个用Hugo搭建的完整站点，且已经push到了username/username.github.io这个仓库。&#xA;1. 把源仓库传到一个新库 # 整体上传到一个新库后，我们可以使用Git方便地进行管理，相当于把原本在本地的博客系统传到网盘。在设置好Github Actions后，既可以整个库clone下来，也可以通过上传单个.md文件到content/posts文件夹的手动push方式来自动部署，而这都不需要重新搭建Hugo环境。&#xA;在这里我们使用Github Desktop：&#xA;点击菜单栏File，选择Create a new repository。 为了避免文件夹识别的混乱，在设置local path时，可以新建一个文件夹，之后再将博客系统文件（config.toml所在的整个文件夹和子文件夹）复制进来。 复制后，回到Github Desktop，填写Summary，Commit to main，然后Push。 2. 将新库和Github Pages仓库串起来 # 在username/username.github.io下是public文件夹内生成的静态网页（你一定记得的，在本地我们需要cd public），而我们希望通过添加或修改源仓库的.md来实现这一系列的生成和部署，这涉及到跨仓库的联动，需要通过token实现。&#xA;网页版，点击头像，进入Github个人的Settings：&#xA;边栏最下方Developer Settings，&#xA;选择Personal access tokens下的Tokens (classic) 点击右方Generate a new token (classic) 输入密码后进入设置，在Note框中填写方便识别的名字，如Deploy，有效期（Expiration）建议选择永不过期（No expiration），访问范围（Scopes）我们需要选中repo和workflow&#xA;点击生成后token即出现，注意它只会出现这唯一的一次，将其复制保存下来&#xA;得到token后，进入源仓库的Settings：&#xA;选择Secrets and variables下的Actions，在右侧选择New repository secret 在Name中填入PERSONAL_TOKEN 在Secret中填入刚才生成的token，点击Add secret保存 3. 设置好Github Actions # 接下来我们进入源仓库的Actions，若之前有使用过，点击左侧New workflow；若无，默认会给出许多推荐，我们任选一个开始configure即可：&#xA;重命名.yml为方便识别的名字，如deploy.yml 修改编辑框内容如下： name: deploy # 这个 action 的名字 on: push: # 代表每次 push 都会 turn on action workflow_dispatch: # 代表我们也可以手动 turn on jobs: build: runs-on: ubuntu-latest steps: - name: checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: setup uses: peaceiris/actions-hugo@v2.</description>
    </item>
    <item>
      <title>在 Hugo 引入汉字标准格式</title>
      <link>https://fanrongbin.com/hugo-hanzi-pro/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/hugo-hanzi-pro/</guid>
      <description>「汉字标准格式」 是一套支援各种印刷效果的 Sass + JavaScript 排版框架 ，包含相邻文字装饰线跳脱 、汉ㄏㄢˋ字ㄗˋhànzì标ㄅㄧㄠ音ㄧㄣbiāoyīn 、着重号 、标点符号修正 、中文四大印刷体 、汉字－西文 mixed 间隙 、 「标点 『挤压』 与 『悬挂』 」 、章节边界调整……&#xA;汉字标准格式&#xA;首先要引入两个源文件：han.min.css与han.min.js，最简便的方式，可以通过CDN或直接下载后（访问两条代码中的对应链接，另存至本地）放入Hugo博客系统下的/static文件夹中。建议使用后者，以方便我们在本地调整样式上的冲突。&#xA;这两种方式，都需要在HTML对应处汇入。为了让Hugo在生成页面时自动汇入，以我所使用的hugo-tufte主题为例：&#xA;1. 添加han.min.css # 修改/themes/hugo-tufte主题文件夹内的/layouts/partials/header.includes.html（核心即找到/layouts中哪个.html对应&amp;lt;head&amp;gt;的生成），在末尾对应加入：&#xA;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; media=&amp;#34;all&amp;#34; href=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/Han/3.2.7/han.min.css&amp;#34;&amp;gt; &amp;lt;!-- 如果使用 CDN，直接复制官网给出的那条 link rel... --&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/han.min.css&amp;#34;&amp;gt; &amp;lt;!-- 如果为本地汇入 --&amp;gt; 2. 添加han.min.js # 在/layouts/_default/baseof.html中&amp;lt;/body&amp;gt;到&amp;lt;/html&amp;gt;的中间，对应加入：&#xA;&amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/Han/3.2.7/han.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- 如果使用 CDN，直接复制官网给出的那条 link rel... --&amp;gt; &amp;lt;script src=&amp;#34;/han.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- 如果为本地汇入 --&amp;gt; 3. 启动脚本渲染 # 如果你只希望对于文章内容进行渲染，不影响菜单栏等，在/layouts/_default/single.html中找到对应你文章内容部分的label，如&amp;lt;article id=&amp;quot;main&amp;quot;&amp;gt;，加入class=&amp;quot;han-init-context&amp;quot;属性即可。&#xA;到此我们已完成两个文件的汇入和启动渲染，hugo server查看，大部分情况下你会发现页面许多处的错乱，以及原&amp;lt;em&amp;gt;的强调样式变成了陌生的着重号等。同时，你也会惊讶地发现在中英文混排时，中英文之间自动加上了间距，且标点符号的显示有明显的优化。&#xA;接下来，你需要根据自身需要调整han.min.css或override冲突的地方，这是我们最关键的工作。css文件下载下来是没有缩进的，你可以通过一些工具标准化，看得会清楚一点。 一般来说，解决冲突最方便的方式是：哪里看不顺眼就注释掉哪里。</description>
    </item>
    <item>
      <title>Hexo &#43; GitHub Pages &#43; Cloudflare</title>
      <link>https://fanrongbin.com/hexo-github-pages-cloudflare/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/hexo-github-pages-cloudflare/</guid>
      <description>系统环境配置 # 安装 Node.js # Node.js 是一种 JavaScript 的运行环境，点击此处以下载。&#xA;如何安装 Node.js 详见此文章。注意：Linux 上安装 Node.js 需要安装 Python 2.6 或 2.7 ，不建议安装 Python 3.0 以上版本。&#xA;安装 Git # Git 是一个开源的分布式版本控制系统，帮助你合并多次改动并记录下来。点击此处以下载。&#xA;如何安装 Git 详见此文章。&#xA;安装 Hexo # Hexo 是一个使用 Markdown 引擎解析文章的快速、简洁且高效的博客框架。当你已经安装好 Node.js 和 Git 后，直接使用 npm 安装 Hexo。&#xA;$ cd &amp;lt;folder&amp;gt; # 将 &amp;lt;folder&amp;gt; 改为你希望安装 Hexo 的路径 $ npm install hexo-cli -g # 使用 npm 安装 $ hexo init &amp;lt;folder&amp;gt; # 将 &amp;lt;folder&amp;gt; 改为你希望搭建博客的路径 $ cd &amp;lt;folder&amp;gt; $ hexo generate # 或 hexo g $ hexo server # 或 hexo s 此时你可以访问 http://localhost:4000/ 查看预览。</description>
    </item>
  </channel>
</rss>
