<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>静态博客 on Rongbin&#39;s Blog</title>
    <link>https://fanrongbin.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
    <description>Recent content in 静态博客 on Rongbin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 18 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://fanrongbin.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Github Actions 自动部署 Hugo</title>
      <link>https://fanrongbin.com/posts/github-actions-deploy-hugo/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/posts/github-actions-deploy-hugo/</guid>
      <description>回应痛点：
写作所用的设备不带环境，没有Git，必须换回原来用的设备hugo生成网页并部署 只想好好写东西，不想再管我的终端/命令行 本文假设你已经在本地拥有一个用Hugo搭建的完整站点，且已经push到了username/username.github.io这个仓库。
1. 把源仓库传到一个新库 # 整体上传到一个新库后，我们可以使用Git方便地进行管理，相当于把原本在本地的博客系统传到网盘。在设置好Github Actions后，既可以整个库clone下来，也可以通过上传单个.md文件到content/posts文件夹的手动push方式来自动部署，而这都不需要重新搭建Hugo环境。
在这里我们使用Github Desktop：
点击菜单栏File，选择Create a new repository。 为了避免文件夹识别的混乱，在设置local path时，可以新建一个文件夹，之后再将博客系统文件（config.toml所在的整个文件夹和子文件夹）复制进来。 复制后，回到Github Desktop，填写Summary，Commit to main，然后Push。 2. 将新库和Github Pages仓库串起来 # 在username/username.github.io下是public文件夹内生成的静态网页（你一定记得的，在本地我们需要cd public），而我们希望通过添加或修改源仓库的.md来实现这一系列的生成和部署，这涉及到跨仓库的联动，需要通过token实现。
网页版，点击头像，进入Github个人的Settings：
边栏最下方Developer Settings，
选择Personal access tokens下的Tokens (classic) 点击右方Generate a new token (classic) 输入密码后进入设置，在Note框中填写方便识别的名字，如Deploy，有效期（Expiration）建议选择永不过期（No expiration），访问范围（Scopes）我们需要选中repo，workflow
点击生成后token即出现，注意它只会出现这唯一的一次，将其复制保存下来
得到token后，进入源仓库的Settings：
选择Secrets and variables下的Actions，在右侧选择New repository secret 在Name中填入PERSONAL_TOKEN 在Secret中填入刚才生成的token，点击Add secret保存 3. 设置好Github Actions # 接下来我们进入源仓库的Actions，若之前有使用过，点击左侧New workflow；若无，默认会给出许多推荐，我们任选一个开始Configure即可：
重命名.yml为方便识别的名字，如deploy.yml 修改编辑框内容如下： name: deploy # 这个 action 的名字 on: push: # 代表每次 push 都会 turn on action workflow_dispatch: # 代表我们也可以手动 turn on jobs: build: runs-on: ubuntu-latest steps: - name: checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: setup uses: peaceiris/actions-hugo@v2.</description>
    </item>
    <item>
      <title>Hexo &#43; GitHub Pages &#43; Cloudflare</title>
      <link>https://fanrongbin.com/posts/hexo-github-pages-cloudflare/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/posts/hexo-github-pages-cloudflare/</guid>
      <description>系统环境配置 # 安装 Node.js # Node.js 是一种 JavaScript 的运行环境，点击此处以下载。
如何安装 Node.js 详见此文章。注意：Linux 上安装 Node.js 需要安装 Python 2.6 或 2.7 ，不建议安装 Python 3.0 以上版本。
安装 Git # Git 是一个开源的分布式版本控制系统，帮助你合并多次改动并记录下来。点击此处以下载。
如何安装 Git 详见此文章。
安装 Hexo # Hexo 是一个使用 Markdown 引擎解析文章的快速、简洁且高效的博客框架。当你已经安装好 Node.js 和 Git 后，直接使用 npm 安装 Hexo。
$ cd &amp;lt;folder&amp;gt; # 将 &amp;lt;folder&amp;gt; 改为你希望安装 Hexo 的路径 $ npm install hexo-cli -g # 使用 npm 安装 $ hexo init &amp;lt;folder&amp;gt; # 将 &amp;lt;folder&amp;gt; 改为你希望搭建博客的路径 $ cd &amp;lt;folder&amp;gt; $ hexo generate # 或 hexo g $ hexo server # 或 hexo s 此时你可以访问 http://localhost:4000/ 查看预览。</description>
    </item>
  </channel>
</rss>
